[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nDropout in Neural Networks Explained\n\n\n6 min\n\n\n\nWeb Scrapping\n\n\n\nIn this post, We’ll understand What Dropout is? Why should we use it? Why does it work? Some tips for using it in practice.\n\n\n\nJan 9, 2023\n\n\n\n\n\n\n\n\n\n\n\nWeb Scraping using BeautifulSoup & Selenium in Python.\n\n\n5 min\n\n\n\nWeb Scrapping\n\n\n\nIn this post, we’ll demonstrate how to scape data from flipkart using BeautifulSoup & Selenium using Python.\n\n\n\nJan 9, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Dropout_Explained/Dropout_Explained.html",
    "href": "posts/Dropout_Explained/Dropout_Explained.html",
    "title": "Dropout in Neural Networks Explained",
    "section": "",
    "text": "Why should we use Dropout?\nWhat Is a Dropout?\nWhy does Dropout works?\nTips for Using Dropout.\nReferences\n\n\n\n\nBefore jumping into what is dropout, let’s try to answer the question of why should we use Dropout. Deep Neural Networks which are trained on smaller datasets can overfit the training data. Now, what is Overfitting? Overfitting happens when your model is too powerful to memorize the training data. But who cares about your training data, we want to take the model and put it into production for the use case. We want the model to perform well on the test/unseen dataset. Usually, Convolutional Neural Networks are less prone to Overfitting because of the idea of weight sharing i.e., you use the same filter/kernel and slide over the image, and therefore, you end up having fewer parameters in CNNs. The problem primarily occurs when you have a Deep Fully Connected Neural Network that tends to have a lot of parameters & they are likely to overfit. So, in short, Dropout is a regularization technique that prevents your Deep Neural Networks to overfit.\nDoes that mean you cannot apply to Convolutional Neural Networks? The answer is No, You can apply to CNNs and even to LSTMs and GRUs.\n\n\n\n\n\nLet’s try to Understand the dropout in the context of Fully Connected Neural Networks since they are more prone to Overfit. Look at the below image: \nIn a Nutshell, Dropout is about killing/turning off the nodes in a network at a layer. Suppose you have an MLP like in figure(a), then during the training stage at layer l, you are essentially ignoring the neurons and that is done randomly with a certain probability, p. This probability, p, is the dropout rate that is a HyperParameter that you set before training the Network. Say you choose the dropout rate p=0.5 then it means you will delete each node with a 50% probability during each forward pass of your minibatch. In each forward pass of your minibatch, you will randomly drop the nodes and these nodes will be not going to update during backpropagation. \nIn the above Image, Consider in the first forward pass in the Middle layer dropout may disable the 2nd & 4th nodes but in the second forward pass maybe 1st & 4th nodes will get disabled. In each iteration, during backpropagation, the weights corresponding to these nodes will not be updated.\nHow do we drop nodes practically? Let’s compare the standard network and a dropout network. \nWe can observe the inputs of layer l, y^l, are multiplied with the weights, wi^(l+1) and bias bi^(l+1) is added to get net inputs for one neuron, and later a non-linearity (activation function) is applied on it to generate the value of the neuron in layer (l+1).\n\n - But in Dropout Network, first, a boolean vector r^(l) is generated which will contain the same number of elements as the number of neurons in layer l, then this vector is multiplied by the input vectors of layer l to get the net input. The net input is finally passed into an activation function. But the question is how do you arrive at this boolean vector? Let’s take an example to illustrate this point, in the above image we have 3 neurons in layer l, suppose you set the dropout rate to p=0.5 then one way to create the boolean vector is first to generate the random number vector containing numbers between 0 & 1. How can you do that? You can sample 3 numbers from a Uniform distribution with an interval [0,1]. Assume that you get a vector of random numbers as [0.1, 0.6, 0.8], then you will set the value of the vector to be zero when the random value &lt; dropout rate(0.5 in our case) else you set 1. So, our random vector becomes [0,1,1] which represents that neuron1 is dropped and the rest of the neurons and not. Now, This vector we are calling r^(l) & the rest of the things are the same as usual.\n\nSo far we talked about the Training stage, But how does dropout work in the Inference stage? Since dropout is dropping neurons randomly in every forward pass of the minibatch, the authors of the paper: A Simple Way to Prevent Neural Networks from Overfitting uses a trick to avoid this randomization, and your model should be deterministic during Inference otherwise your predictions and accuracy computed on the test set will not be deterministic. For instance, we are creating a credit scoring model then due to dropping neurons randomly a customer might get different scores on different dates because the neurons will be dropped randomly. That’s why Dropout is applied to training the model only. During Inference, before finalizing the network the weights are first scaled by the chosen dropout rate (p) i.e., Wtest^(l) = pW^(l). Now the network can be used as normal to make predictions on unseen data.\nNote: The rescaling of the weights can be performed at the training time instead, after each weight update at the end of the min-batch. This is sometimes called an “Inverse Dropout” and it does not require any modification of weights during training. Both Keras & PyTorch deep learning Libraries Dropout in this way.\n\n\n\n\n\nOne interpretation is the Co-adaptation theory: It refers to the fact that now the network doesn’t learn to rely on particular connections too heavily. So, if we have a Fully Connected Neural Network with Dropout applied to a particular layer then the network will rely on neuron1 & neuron4 only if that layer has 4 neurons in total while training. Consider a real-life example where your teacher forms groups for projects and you are randomly assigned to a group. So that you don’t rely on your best friend (let’s say). This way your teacher is making you independent and this is called Co-adaptation & you want to prevent your network from it.\n\n\n\n\n\n\nDropout is a general idea and it can be used with any Network either LSTMs, GRUs, MLPs, CNNs.\n\n\nA good dropout rate is between 0.5 to 0.8 in the hidden layers. But we can use different dropout rates in different hidden layers.\n\n\nMake your network complex by increasing its capacity until it overfits and then add dropout to the layers to prevent overfitting.\n\n\nTo find the optimal dropout rate we can use cross-validation to find it. Since, it is not always possible to do cross-validation because your dataset might be very big. Therefore, the dropout rate = 0.5 works very well for most problems.\n\n\n\n\n\n\nhttps://www.youtube.com/watch?v=FKTWKZU3l6k&list=PLoEMreTa9CNmuxQeIKWaz7AVFd_ZeAcy4&index=5\nPart-1, Part-2, Part-3 : By Professor Sebastian Raschka"
  },
  {
    "objectID": "posts/Dropout_Explained/Dropout_Explained.html#why-should-we-use-dropout",
    "href": "posts/Dropout_Explained/Dropout_Explained.html#why-should-we-use-dropout",
    "title": "Dropout in Neural Networks Explained",
    "section": "",
    "text": "Before jumping into what is dropout, let’s try to answer the question of why should we use Dropout. Deep Neural Networks which are trained on smaller datasets can overfit the training data. Now, what is Overfitting? Overfitting happens when your model is too powerful to memorize the training data. But who cares about your training data, we want to take the model and put it into production for the use case. We want the model to perform well on the test/unseen dataset. Usually, Convolutional Neural Networks are less prone to Overfitting because of the idea of weight sharing i.e., you use the same filter/kernel and slide over the image, and therefore, you end up having fewer parameters in CNNs. The problem primarily occurs when you have a Deep Fully Connected Neural Network that tends to have a lot of parameters & they are likely to overfit. So, in short, Dropout is a regularization technique that prevents your Deep Neural Networks to overfit.\nDoes that mean you cannot apply to Convolutional Neural Networks? The answer is No, You can apply to CNNs and even to LSTMs and GRUs."
  },
  {
    "objectID": "posts/Dropout_Explained/Dropout_Explained.html#what-is-dropout",
    "href": "posts/Dropout_Explained/Dropout_Explained.html#what-is-dropout",
    "title": "Dropout in Neural Networks Explained",
    "section": "",
    "text": "Let’s try to Understand the dropout in the context of Fully Connected Neural Networks since they are more prone to Overfit. Look at the below image: \nIn a Nutshell, Dropout is about killing/turning off the nodes in a network at a layer. Suppose you have an MLP like in figure(a), then during the training stage at layer l, you are essentially ignoring the neurons and that is done randomly with a certain probability, p. This probability, p, is the dropout rate that is a HyperParameter that you set before training the Network. Say you choose the dropout rate p=0.5 then it means you will delete each node with a 50% probability during each forward pass of your minibatch. In each forward pass of your minibatch, you will randomly drop the nodes and these nodes will be not going to update during backpropagation. \nIn the above Image, Consider in the first forward pass in the Middle layer dropout may disable the 2nd & 4th nodes but in the second forward pass maybe 1st & 4th nodes will get disabled. In each iteration, during backpropagation, the weights corresponding to these nodes will not be updated.\nHow do we drop nodes practically? Let’s compare the standard network and a dropout network. \nWe can observe the inputs of layer l, y^l, are multiplied with the weights, wi^(l+1) and bias bi^(l+1) is added to get net inputs for one neuron, and later a non-linearity (activation function) is applied on it to generate the value of the neuron in layer (l+1).\n\n - But in Dropout Network, first, a boolean vector r^(l) is generated which will contain the same number of elements as the number of neurons in layer l, then this vector is multiplied by the input vectors of layer l to get the net input. The net input is finally passed into an activation function. But the question is how do you arrive at this boolean vector? Let’s take an example to illustrate this point, in the above image we have 3 neurons in layer l, suppose you set the dropout rate to p=0.5 then one way to create the boolean vector is first to generate the random number vector containing numbers between 0 & 1. How can you do that? You can sample 3 numbers from a Uniform distribution with an interval [0,1]. Assume that you get a vector of random numbers as [0.1, 0.6, 0.8], then you will set the value of the vector to be zero when the random value &lt; dropout rate(0.5 in our case) else you set 1. So, our random vector becomes [0,1,1] which represents that neuron1 is dropped and the rest of the neurons and not. Now, This vector we are calling r^(l) & the rest of the things are the same as usual.\n\nSo far we talked about the Training stage, But how does dropout work in the Inference stage? Since dropout is dropping neurons randomly in every forward pass of the minibatch, the authors of the paper: A Simple Way to Prevent Neural Networks from Overfitting uses a trick to avoid this randomization, and your model should be deterministic during Inference otherwise your predictions and accuracy computed on the test set will not be deterministic. For instance, we are creating a credit scoring model then due to dropping neurons randomly a customer might get different scores on different dates because the neurons will be dropped randomly. That’s why Dropout is applied to training the model only. During Inference, before finalizing the network the weights are first scaled by the chosen dropout rate (p) i.e., Wtest^(l) = pW^(l). Now the network can be used as normal to make predictions on unseen data.\nNote: The rescaling of the weights can be performed at the training time instead, after each weight update at the end of the min-batch. This is sometimes called an “Inverse Dropout” and it does not require any modification of weights during training. Both Keras & PyTorch deep learning Libraries Dropout in this way."
  },
  {
    "objectID": "posts/Dropout_Explained/Dropout_Explained.html#why-does-dropout-works",
    "href": "posts/Dropout_Explained/Dropout_Explained.html#why-does-dropout-works",
    "title": "Dropout in Neural Networks Explained",
    "section": "",
    "text": "One interpretation is the Co-adaptation theory: It refers to the fact that now the network doesn’t learn to rely on particular connections too heavily. So, if we have a Fully Connected Neural Network with Dropout applied to a particular layer then the network will rely on neuron1 & neuron4 only if that layer has 4 neurons in total while training. Consider a real-life example where your teacher forms groups for projects and you are randomly assigned to a group. So that you don’t rely on your best friend (let’s say). This way your teacher is making you independent and this is called Co-adaptation & you want to prevent your network from it."
  },
  {
    "objectID": "posts/Dropout_Explained/Dropout_Explained.html#tips-for-using-dropout",
    "href": "posts/Dropout_Explained/Dropout_Explained.html#tips-for-using-dropout",
    "title": "Dropout in Neural Networks Explained",
    "section": "",
    "text": "Dropout is a general idea and it can be used with any Network either LSTMs, GRUs, MLPs, CNNs.\n\n\nA good dropout rate is between 0.5 to 0.8 in the hidden layers. But we can use different dropout rates in different hidden layers.\n\n\nMake your network complex by increasing its capacity until it overfits and then add dropout to the layers to prevent overfitting.\n\n\nTo find the optimal dropout rate we can use cross-validation to find it. Since, it is not always possible to do cross-validation because your dataset might be very big. Therefore, the dropout rate = 0.5 works very well for most problems."
  },
  {
    "objectID": "posts/Dropout_Explained/Dropout_Explained.html#references",
    "href": "posts/Dropout_Explained/Dropout_Explained.html#references",
    "title": "Dropout in Neural Networks Explained",
    "section": "",
    "text": "https://www.youtube.com/watch?v=FKTWKZU3l6k&list=PLoEMreTa9CNmuxQeIKWaz7AVFd_ZeAcy4&index=5\nPart-1, Part-2, Part-3 : By Professor Sebastian Raschka"
  },
  {
    "objectID": "posts/Web_Scraping/Flipkart_.html",
    "href": "posts/Web_Scraping/Flipkart_.html",
    "title": "Web Scraping using BeautifulSoup & Selenium in Python.",
    "section": "",
    "text": "Today, the Internet is flooded with an enormous amount of data relative to what we had a decade ago. According to Forbes, the amount of data we produce every day is truly mind-boggling. There are 2.5 quintillion bytes of data generated every day at our current pace, and the credit goes to the Internet of Things (IoT) devices. With access to this data, either in the form of audio, video, text, images, or any format, most businesses are relying heavily on data to beat their competitors & succeed in their business. Unfortunately, most of this data is not open. Most websites do not provide the option to save the data which they display on their websites. This is where Web Scraping tools/ Software comes to extract the data from the websites."
  },
  {
    "objectID": "posts/Web_Scraping/Flipkart_.html#introduction",
    "href": "posts/Web_Scraping/Flipkart_.html#introduction",
    "title": "Web Scraping using BeautifulSoup & Selenium in Python.",
    "section": "",
    "text": "Today, the Internet is flooded with an enormous amount of data relative to what we had a decade ago. According to Forbes, the amount of data we produce every day is truly mind-boggling. There are 2.5 quintillion bytes of data generated every day at our current pace, and the credit goes to the Internet of Things (IoT) devices. With access to this data, either in the form of audio, video, text, images, or any format, most businesses are relying heavily on data to beat their competitors & succeed in their business. Unfortunately, most of this data is not open. Most websites do not provide the option to save the data which they display on their websites. This is where Web Scraping tools/ Software comes to extract the data from the websites."
  },
  {
    "objectID": "posts/Web_Scraping/Flipkart_.html#what-is-web-scraping",
    "href": "posts/Web_Scraping/Flipkart_.html#what-is-web-scraping",
    "title": "Web Scraping using BeautifulSoup & Selenium in Python.",
    "section": "What is Web Scraping? ",
    "text": "What is Web Scraping? \n\nWeb Scraping is the process of automatically downloading the data displayed on the website using some computer program. A web scraping tool can scrape multiple pages from a website & automate the tedious task of manually copying and pasting the data displayed. Web Scraping is important because, irrespective of the industry, the web contains information that can provide actionable insights for businesses to gain an advantage over competitors."
  },
  {
    "objectID": "posts/Web_Scraping/Flipkart_.html#to-fetch-the-data-using-web-scraping-using-python-we-need-to-go-through-the-following-steps",
    "href": "posts/Web_Scraping/Flipkart_.html#to-fetch-the-data-using-web-scraping-using-python-we-need-to-go-through-the-following-steps",
    "title": "Web Scraping using BeautifulSoup & Selenium in Python.",
    "section": "To Fetch the data using Web Scraping using Python, we need to go through the following steps:",
    "text": "To Fetch the data using Web Scraping using Python, we need to go through the following steps:\n\nFind the URL that you want to scrape\nInspecting the Page\nFind the data you want to extract\nWrite the code\nRun the code & extract the data\nFinally, Store the data in the required format"
  },
  {
    "objectID": "posts/Web_Scraping/Flipkart_.html#packages-used-for-web-scraping",
    "href": "posts/Web_Scraping/Flipkart_.html#packages-used-for-web-scraping",
    "title": "Web Scraping using BeautifulSoup & Selenium in Python.",
    "section": "Packages used for Web Scraping",
    "text": "Packages used for Web Scraping\n\nWe’ll use the following python packages:\n\nPandas: Pandas is a library used for data manipulation and analysis. It is used to store the data in the desired format.\nBeautifulSoup4: BeautifulSoup is the python web scraping library used for parsing HTML documents. It creates parse trees that are helpful in extracting tags from the HTML string.\nSelenium: Selenium is a tool designed to help you run automated tests in web applications. Although it’s not its main purpose, Selenium is also used in Python for web scraping, because it can access JavaScript-rendered content (which regular scraping tools like BeautifulSoup can’t do). We’ll use Selenium to download the HTML content from Flipkart and see in an interactive way what’s happening."
  },
  {
    "objectID": "posts/Web_Scraping/Flipkart_.html#project-demonstration",
    "href": "posts/Web_Scraping/Flipkart_.html#project-demonstration",
    "title": "Web Scraping using BeautifulSoup & Selenium in Python.",
    "section": "Project Demonstration",
    "text": "Project Demonstration\n\nImporting necessary Libraries\n\nimport csv\nfrom bs4 import BeautifulSoup\nfrom selenium import webdriver\nimport pandas as pd\n\n\n\nStarting up the WebDriver\n\n# Creating an instance of webdriver for google chrome\ndriver = webdriver.Chrome()\n\n\n# Using webdriver we'll now open the flipkart website in chrome\nurl = 'https://flipkart.com'\n# We;ll use the get method of driver and pass in the URL\ndriver.get(url)\n\n\nNow there a few ways we can conduct a product search :\n\n\nFirst is to automate the browser by finding the input element and then insert a text and hit enter key on the keyboard. The image like below.\n\n\n\n\n\nHowever, this kind of automation is unnecessary and it creates a potential for program failure. The Rule of thumb for automation is to only automate what you absolutely need to when Web Scraping.\n\nLet’s search the input inside the search area and hit enter. You’ll notice that the search term has now embeded into the URL site. Now we can use this pattern to create a function that will build the necessary URL for our driver to retrieve. This will be much more efficient in the long term and less prone to proram failure. The image like below.\n\n\n\n\nLet’s copy this Pattern and create a function that will insert the search term using string formatting.\n\n\ndef get_url(search_item):\n    '''\n    This function fetches the URL of the item that you want to search\n    '''\n    template = 'https://www.flipkart.com/search?q={}&as=on&as-show=on&otracker=AS_Query_HistoryAutoSuggest_1_4_na_na_na&otracker1=AS_Query_HistoryAutoSuggest_1_4_na_na_na&as-pos=1&as-type=HISTORY&suggestionId=mobile+phones&requestId=e625b409-ca2a-456a-b53c-0fdb7618b658&as-backfill=on'\n    # We'are replacing every space with '+' to adhere with the pattern \n    search_item = search_item.replace(\" \",\"+\")\n    return template.format(search_item)\n\n\nNow we have a function that will generate a URL based on the search term we provide.\n\n\n# Checking whether the function is working properly or not\nurl = get_url('mobile phones')\nprint(url)\n\nhttps://www.flipkart.com/search?q=mobile+phones&as=on&as-show=on&otracker=AS_Query_HistoryAutoSuggest_1_4_na_na_na&otracker1=AS_Query_HistoryAutoSuggest_1_4_na_na_na&as-pos=1&as-type=HISTORY&suggestionId=mobile+phones&requestId=e625b409-ca2a-456a-b53c-0fdb7618b658&as-backfill=on\n\n\n\nThe fuction produces the same result as before.\n\n\n\nExtracting the collection\n\nNow we are going to extract the contents of the webpage from which we want to extract the information from.\nTo do that we need to create a BeautifulSoup object which will parse the HTML content from the page source.\n\n\n# Creating a soup object using driver.page_source to retreive the HTML text and then we'll use the default html parser to parse\n# the HTML.\nsoup = BeautifulSoup(driver.page_source, 'html.parser')\n\n\n\nNow that we have identified that the above card indicated by the box contains all the information what we need for a mobile phone. So let’s find out all the tags for these boxes/cards which contains information we want to extract.\nWe’ll be extracting Model , stars, number of ratings, number of reviews, RAM, Storage capacity, Exapandable option, display, camera information, battery, processor , warranty and Price information."
  },
  {
    "objectID": "posts/Web_Scraping/Flipkart_.html#inspecting-the-tags",
    "href": "posts/Web_Scraping/Flipkart_.html#inspecting-the-tags",
    "title": "Web Scraping using BeautifulSoup & Selenium in Python.",
    "section": "Inspecting the tags",
    "text": "Inspecting the tags\n\n\nWe can fetch the a tag & specificallyclass = _1fQZEK to get all the cards/boxes and then we can easily take out information of out these boxes for any mobile phone.\n\n\nresults = soup.find_all('a',{'class':\"_1fQZEK\"})\nlen(results)\n\n24\n\n\n\nPrototyping for a single record\n\n# picking the 1st card from the complete list of cards\nitem = results[0]\n\n\n# Extracting the model of the phone from the 1st card\nmodel = item.find('div',{'class':\"_4rR01T\"}).text\nmodel\n\n'REDMI 9i (Nature Green, 64 GB)'\n\n\n\n# Extracting Stars from 1st card\nstar = item.find('div',{'class':\"_3LWZlK\"}).text\nstar\n\n'4.3'\n\n\n\n# Extracting Number of Ratings from 1st card\nnum_ratings = item.find('span',{'class':\"_2_R_DZ\"}).text.replace('\\xa0&\\xa0',\" ; \")[0:item.find('span',{'class':\"_2_R_DZ\"}).text.replace('\\xa0&\\xa0',\" ; \").find(';')].strip()\nnum_ratings\n\n'4,06,452 Ratings'\n\n\n\n# Extracting Number of Reviews from 1st card\nreviews = item.find('span',{'class':\"_2_R_DZ\"}).text.replace('\\xa0&\\xa0',\" ; \")[item.find('span',{'class':\"_2_R_DZ\"}).text.replace('\\xa0&\\xa0',\" ; \").find(';')+1:].strip()\nreviews\n\n'23,336 Reviews'\n\n\n\n# Extracting RAM from the 1st card\nram = item.find('li',{'class':\"rgWa7D\"}).text[0:item.find('li',{'class':\"rgWa7D\"}).text.find('|')]\nram\n\n'4 GB RAM '\n\n\n\n# Extracting Storage/ROM from 1st card\nstorage = item.find('li',{'class':\"rgWa7D\"}).text[item.find('li',{'class':\"rgWa7D\"}).text.find('|')+1:][0:10].strip()\nstorage\n\n'64 GB ROM'\n\n\n\n# Extracting whether there is an option of expanding the storage or not\nexpandable = item.find('li',{'class':\"rgWa7D\"}).text[item.find('li',{'class':\"rgWa7D\"}).text.find('|')+1:][13:]\nexpandable\n\n'Expandable Upto 512 GB'\n\n\n\n# Extracting the display option from the 1st card\ndisplay = item.find_all('li')[1].text.strip()\ndisplay\n\n'16.59 cm (6.53 inch) HD+ Display'\n\n\n\n# Extracting camera options from the 1st card\ncamera = item.find_all('li')[2].text.strip()\ncamera\n\n'13MP Rear Camera | 5MP Front Camera'\n\n\n\n# Extracting the battery option from the 1st card\nbattery = item.find_all('li')[3].text\nbattery\n\n'5000 mAh Lithium Polymer Battery'\n\n\n\n# Extracting the processir option from the 1st card\nprocessor = item.find_all('li')[4].text.strip()\nprocessor\n\n'MediaTek Helio G25 Processor'\n\n\n\n# Extracting Warranty from the 1st card\nwarranty = item.find_all('li')[-1].text.strip()\nwarranty\n\n'Brand Warranty of 1 Year Available for Mobile and 6 Months for Accessories'\n\n\n\n# Extracting price of the model from the 1st card\nprice = item.find('div',{'class':'_30jeq3 _1_WHN1'}).text\n\n\n\nGeneralizing the Pattern\n\nNow let create a function that will extract all the information at once from a single page.\n\n\ndef extract_phone_model_info(item):\n    \"\"\"\n    This function extracts model, price, ram, storage, stars , number of ratings, number of reviews, \n    storage expandable option, display option, camera quality, battery , processor, warranty of a phone model at flipkart\n    \"\"\"\n    # Extracting the model of the phone from the 1st card\n    model = item.find('div',{'class':\"_4rR01T\"}).text\n    # Extracting Stars from 1st card\n    star = item.find('div',{'class':\"_3LWZlK\"}).text\n    # Extracting Number of Ratings from 1st card\n    num_ratings = item.find('span',{'class':\"_2_R_DZ\"}).text.replace('\\xa0&\\xa0',\" ; \")[0:item.find('span',{'class':\"_2_R_DZ\"}).text.replace('\\xa0&\\xa0',\" ; \").find(';')].strip()\n    # Extracting Number of Reviews from 1st card\n    reviews = item.find('span',{'class':\"_2_R_DZ\"}).text.replace('\\xa0&\\xa0',\" ; \")[item.find('span',{'class':\"_2_R_DZ\"}).text.replace('\\xa0&\\xa0',\" ; \").find(';')+1:].strip()\n    # Extracting RAM from the 1st card\n    ram = item.find('li',{'class':\"rgWa7D\"}).text[0:item.find('li',{'class':\"rgWa7D\"}).text.find('|')]\n    # Extracting Storage/ROM from 1st card\n    storage = item.find('li',{'class':\"rgWa7D\"}).text[item.find('li',{'class':\"rgWa7D\"}).text.find('|')+1:][0:10].strip()\n    # Extracting whether there is an option of expanding the storage or not\n    expandable = item.find('li',{'class':\"rgWa7D\"}).text[item.find('li',{'class':\"rgWa7D\"}).text.find('|')+1:][13:]\n    # Extracting the display option from the 1st card\n    display = item.find_all('li')[1].text.strip()\n    # Extracting camera options from the 1st card\n    camera = item.find_all('li')[2].text.strip()\n    # Extracting the battery option from the 1st card\n    battery = item.find_all('li')[3].text\n    # Extracting the processir option from the 1st card\n    processor = item.find_all('li')[4].text.strip()\n    # Extracting Warranty from the 1st card\n    warranty = item.find_all('li')[-1].text.strip()\n    # Extracting price of the model from the 1st card\n    price = item.find('div',{'class':'_30jeq3 _1_WHN1'}).text\n    result = (model,star,num_ratings,reviews,ram,storage,expandable,display,camera,battery,processor,warranty,price)\n    return result\n\n\n# Now putting all the information from all the cards/phone models and putting them into a list\nrecords_list = []\nresults = soup.find_all('a',{'class':\"_1fQZEK\"})\nfor item in results:\n    records_list.append(extract_phone_model_info(item))\n\n\nViewing how does our dataframe look like for the 1st page.\n\n\npd.DataFrame(records_list,columns=['model',\"star\",\"num_ratings\"\n   ,\"reviews\",'ram',\"storage\",\"expandable\",\"display\",\"camera\",\"battery\",\"processor\",\"warranty\",\"price\"])\n\n\n\n\n\n\n\n\nmodel\nstar\nnum_ratings\nreviews\nram\nstorage\nexpandable\ndisplay\ncamera\nbattery\nprocessor\nwarranty\nprice\n\n\n\n\n0\nREDMI 9i (Nature Green, 64 GB)\n4.3\n4,06,452 Ratings\n23,336 Reviews\n4 GB RAM\n64 GB ROM\nExpandable Upto 512 GB\n16.59 cm (6.53 inch) HD+ Display\n13MP Rear Camera | 5MP Front Camera\n5000 mAh Lithium Polymer Battery\nMediaTek Helio G25 Processor\nBrand Warranty of 1 Year Available for Mobile ...\n₹8,499\n\n\n1\nrealme C21 (Cross Blue, 64 GB)\n4.4\n63,273 Ratings\n2,912 Reviews\n4 GB RAM\n64 GB ROM\nExpandable Upto 256 GB\n16.51 cm (6.5 inch) HD+ Display\n13MP + 2MP + 2MP | 5MP Front Camera\n5000 mAh Battery\nMediaTek Helio G35 Processor\n1 Year Warranty for Mobile and 6 Months for Ac...\n₹9,499\n\n\n2\nrealme C21 (Cross Black, 64 GB)\n4.4\n63,273 Ratings\n2,912 Reviews\n4 GB RAM\n64 GB ROM\nExpandable Upto 256 GB\n16.51 cm (6.5 inch) HD+ Display\n13MP + 2MP + 2MP | 5MP Front Camera\n5000 mAh Battery\nMediaTek Helio G35 Processor\n1 Year Warranty for Mobile and 6 Months for Ac...\n₹9,499\n\n\n3\nrealme C21 (Cross Black, 32 GB)\n4.4\n51,035 Ratings\n2,564 Reviews\n3 GB RAM\n32 GB ROM\nExpandable Upto 256 GB\n16.51 cm (6.5 inch) HD+ Display\n13MP + 2MP + 2MP | 5MP Front Camera\n5000 mAh Battery\nMediaTek Helio G35 Processor\n1 Year Warranty for Mobile and 6 Months for Ac...\n₹8,499\n\n\n4\nrealme C21 (Cross Blue, 32 GB)\n4.4\n51,035 Ratings\n2,564 Reviews\n3 GB RAM\n32 GB ROM\nExpandable Upto 256 GB\n16.51 cm (6.5 inch) HD+ Display\n13MP + 2MP + 2MP | 5MP Front Camera\n5000 mAh Battery\nMediaTek Helio G35 Processor\n1 Year Warranty for Mobile and 6 Months for Ac...\n₹8,499\n\n\n5\nREDMI 9 Power (Mighty Black, 64 GB)\n4.3\n1,30,038 Ratings\n9,051 Reviews\n4 GB RAM\n64 GB ROM\n\n16.59 cm (6.53 inch) Full HD+ Display\n48MP + 8MP + 2MP + 2MP | 8MP Front Camera\n6000 mAh Battery\nQualcomm Snapdragon 662 Processor\n1 year manufacturer warranty for device and 6 ...\n₹10,999\n\n\n6\nPOCO M3 (Cool Blue, 64 GB)\n4.3\n14,630 Ratings\n930 Reviews\n4 GB RAM\n64 GB ROM\nExpandable Upto 512 GB\n16.59 cm (6.53 inch) Full HD+ Display\n48MP + 2MP + 2MP | 8MP Front Camera\n6000 mAh Lithium-ion Polymer Battery\nQualcomm Snapdragon 662 Processor\nOne Year Warranty for Handset, 6 Months for Ac...\n₹10,499\n\n\n7\nPOCO M2 Reloaded (Mostly Blue, 64 GB)\n4.3\n20,010 Ratings\n1,315 Reviews\n4 GB RAM\n64 GB ROM\nExpandable Upto 512 GB\n16.59 cm (6.53 inch) Full HD+ Display\n13MP + 8MP + 5MP + 2MP | 8MP Front Camera\n5000 mAh Lithium Polymer Battery\nMediaTek Helio G80 Processor\n1 Year for Handset, 6 Months for Accessories\n₹9,999\n\n\n8\nrealme C11 2021 (Cool Grey, 32 GB)\n4.3\n3,584 Ratings\n197 Reviews\n2 GB RAM\n32 GB ROM\nExpandable Upto 256 GB\n16.51 cm (6.5 inch) HD+ Display\n8MP Rear Camera | 5MP Front Camera\n5000 mAh Battery\nOcta-core Processor\n1 Year Warranty for Mobile and 6 Months for Ac...\n₹6,999\n\n\n9\nrealme C11 2021 (Cool Blue, 32 GB)\n4.3\n3,584 Ratings\n197 Reviews\n2 GB RAM\n32 GB ROM\nExpandable Upto 256 GB\n16.51 cm (6.5 inch) HD+ Display\n8MP Rear Camera | 5MP Front Camera\n5000 mAh Battery\nOcta-core Processor\n1 Year Warranty for Mobile and 6 Months for Ac...\n₹6,999\n\n\n10\nREDMI 9 Power (Fiery Red, 64 GB)\n4.3\n1,30,038 Ratings\n9,051 Reviews\n4 GB RAM\n64 GB ROM\n\n16.59 cm (6.53 inch) Full HD+ Display\n48MP + 8MP + 2MP + 2MP | 8MP Front Camera\n6000 mAh Battery\nQualcomm Snapdragon 662 Processor\n1 year manufacturer warranty for device and 6 ...\n₹10,999\n\n\n11\nREDMI 9i (Midnight Black, 64 GB)\n4.3\n4,06,452 Ratings\n23,336 Reviews\n4 GB RAM\n64 GB ROM\nExpandable Upto 512 GB\n16.59 cm (6.53 inch) HD+ Display\n13MP Rear Camera | 5MP Front Camera\n5000 mAh Lithium Polymer Battery\nMediaTek Helio G25 Processor\nBrand Warranty of 1 Year Available for Mobile ...\n₹8,499\n\n\n12\nInfinix Smart 5A (Quetzal Cyan, 32 GB)\n4.5\n3,546 Ratings\n244 Reviews\n2 GB RAM\n32 GB ROM\nExpandable Upto 256 GB\n16.56 cm (6.52 inch) HD+ Display\n8MP + Depth Sensor | 8MP Front Camera\n5000 mAh Li-ion Polymer Battery\nMediaTek Helio A20 Processor\n1 Year on Handset and 6 Months on Accessories\n₹6,699\n\n\n13\nInfinix Smart 5A (Midnight Black, 32 GB)\n4.5\n3,546 Ratings\n244 Reviews\n2 GB RAM\n32 GB ROM\nExpandable Upto 256 GB\n16.56 cm (6.52 inch) HD+ Display\n8MP + Depth Sensor | 8MP Front Camera\n5000 mAh Li-ion Polymer Battery\nMediaTek Helio A20 Processor\n1 Year on Handset and 6 Months on Accessories\n₹6,699\n\n\n14\nInfinix Smart 5A (Ocean Wave, 32 GB)\n4.5\n3,546 Ratings\n244 Reviews\n2 GB RAM\n32 GB ROM\nExpandable Upto 256 GB\n16.56 cm (6.52 inch) HD+ Display\n8MP + Depth Sensor | 8MP Front Camera\n5000 mAh Li-ion Polymer Battery\nMediaTek Helio A20 Processor\n1 Year on Handset and 6 Months on Accessories\n₹6,699\n\n\n15\nPOCO M3 (Power Black, 64 GB)\n4.3\n3,10,045 Ratings\n22,471 Reviews\n6 GB RAM\n64 GB ROM\nExpandable Upto 512 GB\n16.59 cm (6.53 inch) Full HD+ Display\n48MP + 2MP + 2MP | 8MP Front Camera\n6000 mAh Lithium-ion Polymer Battery\nQualcomm Snapdragon 662 Processor\nOne Year Warranty for Handset, 6 Months for Ac...\n₹11,499\n\n\n16\nPOCO M3 (Power Black, 128 GB)\n4.3\n3,10,045 Ratings\n22,471 Reviews\n6 GB RAM\n128 GB RO\nExpandable Upto 512 GB\n16.59 cm (6.53 inch) Full HD+ Display\n48MP + 2MP + 2MP | 8MP Front Camera\n6000 mAh Lithium-ion Polymer Battery\nQualcomm Snapdragon 662 Processor\nOne Year Warranty for Handset, 6 Months for Ac...\n₹12,999\n\n\n17\nPOCO M2 Reloaded (Greyish Black, 64 GB)\n4.3\n20,010 Ratings\n1,315 Reviews\n4 GB RAM\n64 GB ROM\nExpandable Upto 512 GB\n16.59 cm (6.53 inch) Full HD+ Display\n13MP + 8MP + 5MP + 2MP | 8MP Front Camera\n5000 mAh Lithium Polymer Battery\nMediaTek Helio G80 Processor\n1 Year for Handset, 6 Months for Accessories\n₹9,999\n\n\n18\nREDMI Note 9 (Aqua Green, 64 GB)\n4.3\n92,325 Ratings\n6,906 Reviews\n4 GB RAM\n64 GB ROM\nExpandable Upto 512 GB\n16.59 cm (6.53 inch) Full HD+ Display\n48MP + 8MP + 2MP + 2MP | 13MP Front Camera\n5020 mAh Battery\nMediaTek Helio G85 Processor\n1 Year Manufacturer Warranty for Device and 6 ...\n₹11,999\n\n\n19\nrealme Narzo 30 5G (Racing Silver, 128 GB)\n4.4\n27,618 Ratings\n2,243 Reviews\n6 GB RAM\n128 GB RO\nExpandable Upto 1 TB\n16.51 cm (6.5 inch) Full HD+ Display\n48MP + 2MP + 2MP | 16MP Front Camera\n5000 mAh Battery\nMediaTek Dimensity 700 (MT6833) Processor\n1 Year Warranty for Mobile and 6 Months for Ac...\n₹15,999\n\n\n20\nREDMI 9 Power (Blazing Blue, 64 GB)\n4.3\n1,30,038 Ratings\n9,051 Reviews\n4 GB RAM\n64 GB ROM\n\n16.59 cm (6.53 inch) Full HD+ Display\n48MP + 8MP + 2MP + 2MP | 8MP Front Camera\n6000 mAh Battery\nQualcomm Snapdragon 662 Processor\n1 year manufacturer warranty for device and 6 ...\n₹10,999\n\n\n21\nPOCO M3 (Yellow, 128 GB)\n4.3\n3,10,045 Ratings\n22,471 Reviews\n6 GB RAM\n128 GB RO\nExpandable Upto 512 GB\n16.59 cm (6.53 inch) Full HD+ Display\n48MP + 2MP + 2MP | 8MP Front Camera\n6000 mAh Lithium-ion Polymer Battery\nQualcomm Snapdragon 662 Processor\nOne Year Warranty for Handset, 6 Months for Ac...\n₹12,999\n\n\n22\nrealme C20 (Cool Grey, 32 GB)\n4.4\n1,35,513 Ratings\n6,302 Reviews\n2 GB RAM\n32 GB ROM\nExpandable Upto 256 GB\n16.51 cm (6.5 inch) HD+ Display\n8MP Rear Camera | 5MP Front Camera\n5000 mAh Battery\nMediaTek Helio G35 Processor\n1 Year Warranty for Mobile and 6 Months for Ac...\n₹7,499\n\n\n23\nrealme C20 (Cool Blue, 32 GB)\n4.4\n1,35,513 Ratings\n6,302 Reviews\n2 GB RAM\n32 GB ROM\nExpandable Upto 256 GB\n16.51 cm (6.5 inch) HD+ Display\n8MP Rear Camera | 5MP Front Camera\n5000 mAh Battery\nMediaTek Helio G35 Processor\n1 Year Warranty for Mobile and 6 Months for Ac...\n₹7,499\n\n\n\n\n\n\n\n\n\nNavigating to next page\n\nWriting a custom function that will help us getting information from multiple pages\n\n\ndef get_url(search_item):\n    '''\n    This function fetches the URL of the item that you want to search\n    '''\n    template = 'https://www.flipkart.com/search?q={}&as=on&as-show=on&otracker=AS_Query_HistoryAutoSuggest_1_4_na_na_na&otracker1=AS_Query_HistoryAutoSuggest_1_4_na_na_na&as-pos=1&as-type=HISTORY&suggestionId=mobile+phones&requestId=e625b409-ca2a-456a-b53c-0fdb7618b658&as-backfill=on'\n    search_item = search_item.replace(\" \",\"+\")\n    # Add term query to URL\n    url = template.format(search_item)\n    # Add term query placeholder\n    url += '&page{}'\n    return url\n\n\n\nPutting it all together\n\nNow combining all thhe things that we have done so far.\n\n\n# Importing necessary Libraries\nimport csv\nfrom bs4 import BeautifulSoup\nfrom selenium import webdriver\nimport pandas as pd\n\ndef get_url(search_item):\n    '''\n    This function fetches the URL of the item that you want to search\n    '''\n    template = 'https://www.flipkart.com/search?q={}&as=on&as-show=on&otracker=AS_Query_HistoryAutoSuggest_1_4_na_na_na&otracker1=AS_Query_HistoryAutoSuggest_1_4_na_na_na&as-pos=1&as-type=HISTORY&suggestionId=mobile+phones&requestId=e625b409-ca2a-456a-b53c-0fdb7618b658&as-backfill=on'\n    search_item = search_item.replace(\" \",\"+\")\n    # Add term query to URL\n    url = template.format(search_item)\n    # Add term query placeholder\n    url += '&page{}'\n    return url\n\ndef extract_phone_model_info(item):\n    \"\"\"\n    This function extracts model, price, ram, storage, stars , number of ratings, number of reviews, \n    storage expandable option, display option, camera quality, battery , processor, warranty of a phone model at flipkart\n    \"\"\"\n    # Extracting the model of the phone from the 1st card\n    model = item.find('div',{'class':\"_4rR01T\"}).text\n    # Extracting Stars from 1st card\n    star = item.find('div',{'class':\"_3LWZlK\"}).text\n    # Extracting Number of Ratings from 1st card\n    num_ratings = item.find('span',{'class':\"_2_R_DZ\"}).text.replace('\\xa0&\\xa0',\" ; \")[0:item.find('span',{'class':\"_2_R_DZ\"}).text.replace('\\xa0&\\xa0',\" ; \").find(';')].strip()\n    # Extracting Number of Reviews from 1st card\n    reviews = item.find('span',{'class':\"_2_R_DZ\"}).text.replace('\\xa0&\\xa0',\" ; \")[item.find('span',{'class':\"_2_R_DZ\"}).text.replace('\\xa0&\\xa0',\" ; \").find(';')+1:].strip()\n    # Extracting RAM from the 1st card\n    ram = item.find('li',{'class':\"rgWa7D\"}).text[0:item.find('li',{'class':\"rgWa7D\"}).text.find('|')]\n    # Extracting Storage/ROM from 1st card\n    storage = item.find('li',{'class':\"rgWa7D\"}).text[item.find('li',{'class':\"rgWa7D\"}).text.find('|')+1:][0:10].strip()\n    # Extracting whether there is an option of expanding the storage or not\n    expandable = item.find('li',{'class':\"rgWa7D\"}).text[item.find('li',{'class':\"rgWa7D\"}).text.find('|')+1:][13:]\n    # Extracting the display option from the 1st card\n    display = item.find_all('li')[1].text.strip()\n    # Extracting camera options from the 1st card\n    camera = item.find_all('li')[2].text.strip()\n    # Extracting the battery option from the 1st card\n    battery = item.find_all('li')[3].text\n    # Extracting the processir option from the 1st card\n    processor = item.find_all('li')[4].text.strip()\n    # Extracting Warranty from the 1st card\n    warranty = item.find_all('li')[-1].text.strip()\n    # Extracting price of the model from the 1st card\n    price = item.find('div',{'class':'_30jeq3 _1_WHN1'}).text\n    result = (model,star,num_ratings,reviews,ram,storage,expandable,display,camera,battery,processor,warranty,price)\n    return result\n\ndef main(search_item):\n    '''\n    This function will create a dataframe for all the details that we are fetching from all the multiple pages\n    '''\n    driver = webdriver.Chrome()\n    records = []\n    url = get_url(search_item)\n    for page in range(1,464):\n        driver.get(url.format(page))\n        soup = BeautifulSoup(driver.page_source,'html.parser')\n        results = soup.find_all('a',{'class':\"_1fQZEK\"})\n        for item in results:\n            records.append(extract_phone_model_info(item))\n    driver.close()\n    # Saving the data into a csv file\n    with open('Flipkart_results.csv','w',newline='',encoding='utf-8') as f:\n        writer = csv.writer(f)\n        writer.writerow(['Model','Stars','Num_of_Ratings','Reviews','Ram','Storage','Expandable',\n                        'Display','Camera','Battery','Processor','Warranty','Price'])\n        writer.writerows(records)\n\n\n\nExtracting Informtion of all the Mobile phones present on multiple pages\n\n%%time\nmain('mobile phones')\n\nWall time: 40min 54s\n\n\n\n\nViewing the data\n\nscraped_df = pd.read_csv('C:\\\\Users\\\\DELL\\\\Desktop\\\\Jupyter Notebook\\\\Jovian Web Scraping\\\\Amazon Products Web Scrapper\\\\Flipkart_results.csv')\nscraped_df.head()\n\n\n\n\n\n\n\n\nModel\nStars\nNum_of_Ratings\nReviews\nRam\nStorage\nExpandable\nDisplay\nCamera\nBattery\nProcessor\nWarranty\nPrice\n\n\n\n\n0\nREDMI 9i (Nature Green, 64 GB)\n4.3\n4,06,452 Ratings\n23,336 Reviews\n4 GB RAM\n64 GB ROM\nExpandable Upto 512 GB\n16.59 cm (6.53 inch) HD+ Display\n13MP Rear Camera | 5MP Front Camera\n5000 mAh Lithium Polymer Battery\nMediaTek Helio G25 Processor\nBrand Warranty of 1 Year Available for Mobile ...\n₹8,499\n\n\n1\nrealme C21 (Cross Black, 64 GB)\n4.4\n63,273 Ratings\n2,912 Reviews\n4 GB RAM\n64 GB ROM\nExpandable Upto 256 GB\n16.51 cm (6.5 inch) HD+ Display\n13MP + 2MP + 2MP | 5MP Front Camera\n5000 mAh Battery\nMediaTek Helio G35 Processor\n1 Year Warranty for Mobile and 6 Months for Ac...\n₹9,499\n\n\n2\nrealme C21 (Cross Blue, 64 GB)\n4.4\n63,273 Ratings\n2,912 Reviews\n4 GB RAM\n64 GB ROM\nExpandable Upto 256 GB\n16.51 cm (6.5 inch) HD+ Display\n13MP + 2MP + 2MP | 5MP Front Camera\n5000 mAh Battery\nMediaTek Helio G35 Processor\n1 Year Warranty for Mobile and 6 Months for Ac...\n₹9,499\n\n\n3\nSAMSUNG Galaxy S21 Ultra (Phantom Silver, 256 GB)\n4.5\n537 Ratings\n101 Reviews\n12 GB RAM\n256 GB RO\nNaN\n17.27 cm (6.8 inch) Quad HD+ Display\n108MP + 12MP + 10MP + 10MP | 40MP Front Camera\n5000 mAh Lithium-ion Battery\nExynos 2100 Processor\n1 Year Manufacturer Warranty for Handset and 6...\n₹1,05,999\n\n\n4\nrealme C21 (Cross Black, 32 GB)\n4.4\n51,035 Ratings\n2,564 Reviews\n3 GB RAM\n32 GB ROM\nExpandable Upto 256 GB\n16.51 cm (6.5 inch) HD+ Display\n13MP + 2MP + 2MP | 5MP Front Camera\n5000 mAh Battery\nMediaTek Helio G35 Processor\n1 Year Warranty for Mobile and 6 Months for Ac...\n₹8,499"
  }
]